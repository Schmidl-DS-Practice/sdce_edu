a function is a named sequence of statements that performs a computation.
The expression in parentheses is called the argument of the function
The argument is a value or variable that we are passing into the function as input to the function.

import math
This statement creates a module object named math. If you print the module
object, you get some information about it:
>>> print(math)
<module 'math' (built-in)>

The module object contains the functions and variables defined in the module.

Given the same inputs, most computer programs generate the same outputs every time, so they are said to be deterministic.

Pseudorandom numbers are not truly random because they are generated by a deterministic computation, but just by looking at the numbers it is all but impossible to distinguish them from random.

The first line of the function definition is called the header; the rest is called the body.

you have to know the order in which statements are executed, which is called the flow of execution.

Inside the function, the arguments are assigned to variables called parameters.

donâ€™t return a value. They are called void functions.

Glossary:
algorithm A general process for solving a category of problems.

argument A value provided to a function when the function is called. This value is assigned to the corresponding parameter in the function.

body The sequence of statements inside a function definition.

composition Using an expression as part of a larger expression, or a statement as part of a larger statement.

deterministic Pertaining to a program that does the same thing each time it runs, given the same inputs.

dot notation The syntax for calling a function in another module by specifying the module name followed by a dot (period) and the function name.

flow of execution The order in which statements are executed during a program run.

fruitful function A function that returns a value.

function A named sequence of statements that performs some useful operation. Functions may or may not take arguments and may or may not produce a result.

function call A statement that executes a function. It consists of the function name followed by an argument list.

function definition A statement that creates a new function, specifying its name, parameters, and the statements it executes.

function object A value created by a function definition. The name of the function is a variable that refers to a function object.

header The first line of a function definition.

import statement A statement that reads a module file and creates a module object.

module object A value created by an import statement that provides access to the data and code defined in a module.

parameter A name used inside a function to refer to the value passed as an argument.

pseudorandom Pertaining to a sequence of numbers that appear to be random, but are generated by a deterministic program.

return value The result of a function. If a function call is used as an expression, the return value is the value of the expression.

void function A function that does not return a value.

yield = sends a result back to the caller but remembers where it left off. Generators use the yield statement to send back a value and suspend their state such that they may be resumed later, to produce a series of results over time.

global = declares module-level variables that are to be assigned
nonlocal = declares enclosing function variables that are to be assigned.
lambda = anonymous functions are functions that are defined without a name. While normal functions are defined using the def keyword, anonymous functions are defined using the lambda keyword.


